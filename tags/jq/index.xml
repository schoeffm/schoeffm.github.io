<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jq on Personal PasteBin</title>
    <link>https://schoeffm.github.io/tags/jq/</link>
    <description>Recent content in jq on Personal PasteBin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2020 15:07:59 +0100</lastBuildDate>
    
	<atom:link href="https://schoeffm.github.io/tags/jq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jq by example</title>
      <link>https://schoeffm.github.io/posts/jq-by-example/</link>
      <pubDate>Wed, 29 Jan 2020 15:07:59 +0100</pubDate>
      
      <guid>https://schoeffm.github.io/posts/jq-by-example/</guid>
      <description>Inspired by a nice tutorial on Baeldung I&amp;rsquo;ve decided to write done some usual suspects when working with jq. Hence, this is more like a cheatsheet than a regular post.
For practitioners and interactive learners I also recommend the great jq-play online editor where you can try jq directly in the browser.
For our examples below let&amp;rsquo;s go with the followin&amp;rsquo; JSON-input (fetched from a micro-profile /health-endpoint).
{ &amp;#34;outcome&amp;#34;: &amp;#34;UP&amp;#34;, &amp;#34;checks&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;core-isAlive&amp;#34;, &amp;#34;state&amp;#34;: &amp;#34;UP&amp;#34;, &amp;#34;data&amp;#34;: { &amp;#34;buildtime&amp;#34;: &amp;#34;2020-01-29T12:46:05.</description>
    </item>
    
  </channel>
</rss>