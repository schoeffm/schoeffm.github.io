<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on Personal PasteBin</title>
    <link>https://schoeffm.github.io/tags/devops/</link>
    <description>Recent content in devops on Personal PasteBin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Sep 2019 16:27:21 +0200</lastBuildDate>
    
	<atom:link href="https://schoeffm.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Network Debugging of Containerized Java Apps</title>
      <link>https://schoeffm.github.io/posts/network-debugging-of-containerized-java-apps/</link>
      <pubDate>Thu, 19 Sep 2019 16:27:21 +0200</pubDate>
      
      <guid>https://schoeffm.github.io/posts/network-debugging-of-containerized-java-apps/</guid>
      <description>&lt;p&gt;The other day, I had the need to look closer into the network communication of a (dockerized) JEE application. My usual &lt;a href=&#34;https://schoeffm.github.io/posts/tcpdump-common-commands/&#34; target=&#34;_blank&#34;&gt;tcpdump approach&lt;/a&gt; wasn&amp;rsquo;t applicable though because the traffic was TLS-encrypted.&lt;br/&gt;
Finally, I ended up with a setup where the app used a &lt;a href=&#34;https://mitmproxy.org&#34; target=&#34;_blank&#34;&gt;man-in-the-middle proxy&lt;/a&gt; for all its communication - that proxy transparently re-encrypted the traffic which gave me the chance to inspect every single message exchanged.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using load-tests as quality gate in Jenkins pipelines</title>
      <link>https://schoeffm.github.io/posts/integration-of-loadtests-within-jenkins-pipelines/</link>
      <pubDate>Wed, 14 Aug 2019 10:41:28 +0200</pubDate>
      
      <guid>https://schoeffm.github.io/posts/integration-of-loadtests-within-jenkins-pipelines/</guid>
      <description>&lt;p&gt;Over years &lt;a href=&#34;https://jmeter.apache.org/&#34; target=&#34;_blank&#34;&gt;JMeter&lt;/a&gt; has always been a valuable tool in my box when dealing with performance testing. But when we&amp;rsquo;ve integrated those tests with our CI/CD-pipeline we always had hard times to control the pipeline outcome based on the performance results. &lt;br/&gt;
In other words, let the test results act as a quality gate for either promoting the build-artfiact along the pipeline or not.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux User Management</title>
      <link>https://schoeffm.github.io/posts/linux-user-management/</link>
      <pubDate>Sat, 10 Aug 2019 10:40:33 +0200</pubDate>
      
      <guid>https://schoeffm.github.io/posts/linux-user-management/</guid>
      <description>Cheatsheet for Linux User Management
Handling users # adds a new user called &amp;#39;schoeffm&amp;#39; useradd -m -s /bin/zsh -G docker schoeffm # └┬┘└────┬─────┘└─┬─────┘ # │ │ │ # │ │ └─&amp;gt; List of groups the user # │ │ should be a member of # │ └─&amp;gt; login shell of the new account # └────────&amp;gt; also create a home directory for this # account # Assigns a new UID to &amp;lt;─────┐ # this account │ # ┌──┴──┐ usermod -aG docker -s /bin/zsh -L|U -u 4711 schoeffm # └───┬────┘ └───┬─────┘ └─┬─┘ # │ │ └─&amp;gt; Lock or Unlock user # │ └─&amp;gt; set new login shell for account # └────────────&amp;gt; append to the list of groups # without &amp;#39;a&amp;#39; this will replace # the group list userdel not explicitly shown here since it&amp;rsquo;s comprehensible.</description>
    </item>
    
    <item>
      <title>Linux Permission Management</title>
      <link>https://schoeffm.github.io/posts/linux-permission-management/</link>
      <pubDate>Tue, 06 Aug 2019 08:59:37 +0200</pubDate>
      
      <guid>https://schoeffm.github.io/posts/linux-permission-management/</guid>
      <description>Cheatsheet for Linux Permission Management
Standard Permissions There are three basic permissions which are read, write and execute. And they can be granted to
 a specific user (so if you are not that user those permissions do not apply to you) a group of users (if you&amp;rsquo;re not a member of that group those permissions do not apply to you) to all other users (so if the first two do not apply - these are then the permissions you&amp;rsquo;ll have on the respective file/directory)  This is also the order in which linux checks the permissions.</description>
    </item>
    
    <item>
      <title>Tcpdump Common Commands</title>
      <link>https://schoeffm.github.io/posts/tcpdump-common-commands/</link>
      <pubDate>Tue, 30 Jul 2019 10:08:07 +0200</pubDate>
      
      <guid>https://schoeffm.github.io/posts/tcpdump-common-commands/</guid>
      <description>&lt;p&gt;When debugging network related issues the CLI tool &lt;code&gt;tcpdump&lt;/code&gt; is a valuable assistant. I usually use a variation of this base command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    sudo tcpdump -A -i lo0 -n -s0 -v port &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SSH Config Format</title>
      <link>https://schoeffm.github.io/posts/ssh-config-format/</link>
      <pubDate>Mon, 24 Jun 2019 15:35:15 +0200</pubDate>
      
      <guid>https://schoeffm.github.io/posts/ssh-config-format/</guid>
      <description>&lt;p&gt;Dealing with SSH-connections can become cumbersome quickly especially when configurations change frequently, too.&lt;/p&gt;

&lt;p&gt;Luckily, you can pre-configure most of a connections settings in a user specific config-file located in your &lt;code&gt;~/.ssh&lt;/code&gt;-folder called &lt;code&gt;config&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>